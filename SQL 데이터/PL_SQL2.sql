--DECLARE
--V_DEPTNO DEPT.DEPTNO%TYPE;
--V_DNAME DEPT.DNAME%TYPE;
--V_LOC DEPT.LOC%TYPE;
--
--CURSOR DEPT_CUR IS
--SELECT *
--FROM DEPT;
--
--BEGIN
-- OPEN DEPT_CUR;
--
--LOOP
--    FETCH DEPT_CUR INTO V_DEPTNO, V_DNAME, V_LOC;
--    EXIT WHEN DEPT_CUR%NOTFOUND;
--    DBMS_OUTPUT.PUT_LINE('부서번호 : ' || V_DEPTNO || '부서명 : ' || V_DNAME || '위치 : ' || V_LOC);
--    END LOOP;
--END;

--DECLARE
--V_DEPT_ROW DEPT%ROWTYPE;
--V_DEPTNO DEPT.DEPTNO%TYPE;
--
--CURSOR C1(P_DEPTNO DEPT.DEPTNO%TYPE) IS
--    SELECT DEPTNO, DNAME, LOC
--    FROM DEPT
--    WHERE DEPTNO = P_DEPTNO;
--BEGIN
--V_DEPTNO := &IN;
--OPEN C1 (V_DEPTNO);
--    LOOP
--        FETCH C1 INTO V_DEPT_ROW;
--        EXIT WHEN C1%NOTFOUND;
--        DBMS_OUTPUT.PUT_LINE(V_DEPTNO ||'번 부서 - DEPTNO : ' || V_DEPT_ROW.DEPTNO 
--                            || ', NAME : ' || V_DEPT_ROW.DNAME
--                            || ', LOC : ' || V_DEPT_ROW.LOC);
--        END LOOP;
--        CLOSE C1;
--OPEN C1 (30);
--    LOOP
--        FETCH C1 INTO V_DEPT_ROW;
--        EXIT WHEN C1%NOTFOUND;
--        DBMS_OUTPUT.PUT_LINE('30번 부서 - DEPTNO : ' || V_DEPT_ROW.DEPTNO 
--                            || ', NAME : ' || V_DEPT_ROW.DNAME
--                            || ', LOC : ' || V_DEPT_ROW.LOC);
--        END LOOP;
--        CLOSE C1;
--END;
--DECLARE
--V_WRONG NUMBER;
--BEGIN
--SELECT DNAME INTO V_WRONG
--FROM DEPT
--WHERE DEPTNO = 10;
--
--EXCEPTION
--WHEN VALUE_ERROR THEN
--DBMS_OUTPUT.PUT_LINE('ERROR!!!');
--WHEN TOO_MANY_ROWS THEN
--DBMS_OUTPUT.PUT_LINE('여러행이 조회 되었습니다!');
--WHEN OTHERS THEN
--DBMS_OUTPUT.PUT_LINE('기타 다른 에러!');
--END;

--DECLARE
--V_WRONG NUMBER;
--BEGIN
--SELECT DNAME INTO V_WRONG
--FROM DEPT
--WHERE DEPTNO = 10;
--EXCEPTION
--WHEN OTHERS THEN
--DBMS_OUTPUT.PUT_LINE('예외 처리 : 사전 정의 외 오류 발생');
--DBMS_OUTPUT.PUT_LINE('SQLCODE : ' || TO_cHAR(SQLCODE));
--DBMS_OUTPUT.PUT_LINE('SQLERRM' || SQLERRM);
--END;

--CREATE OR REPLACE PROCEDURE EMP_SELECT --있으면 냅두고 없으면 새로 생성
--IS
--V_EMP_ROW EMP%ROWTYPE;
--BEGIN
--SELECT * INTO V_EMP_ROW
--FROM EMP
--WHERE EMPNO = 7369;
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.EMPNO);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.ENAME);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.JOB);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.MGR);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.HIREDATE);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.COMM);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.DEPTNO);
--END;

--
--CREATE OR REPLACE PROCEDURE EMP_SELECT --있으면 냅두고 없으면 새로 생성
--IS
--V_DEPTNO NUMBER;
--V_EMP_ROW EMP%ROWTYPE;
--BEGIN
--SELECT * INTO V_EMP_ROW
--FROM EMP
--WHERE EMPNO = V_DEPTNO;
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.EMPNO);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.ENAME);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.JOB);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.MGR);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.HIREDATE);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.COMM);
--DBMS_OUTPUT.PUT_LINE(V_EMP_ROW.DEPTNO);
--END;

--CREATE OR REPLACE PROCEDURE EMPSEL
--IS
--V_EMPNO NUMBER;
--BEGIN
--V_EMPNO := &EMPNO_INPUT;
--EMP_SELECT(V_EMPNO);
--END;

--EXECUTE EMPSEL;
--EXECUTE EMP_SELECT(7369);


--CREATE OR REPLACE PROCEDURE PRO_PARAM_OUT
--(
--IN_EMPNO IN EMP.EMPNO%TYPE,
--OUT_ENAME OUT EMP.ENAME%TYPE,
--OUT_SAL OUT EMP.SAL%TYPE
--)
--IS
--
--BEGIN
--SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
--FROM EMP
--WHERE EMPNO = IN_EMPNO;
--
--END PRO_PARAM_OUT;

--DECLARE
--    V_EMPNO EMP.MGR%TYPE;
--    V_ENAME EMP.ENAME%TYPE;
--    V_SAL EMP.SAL%TYPE;
--BEGIN
--    V_EMPNO := &IN;
--    PRO_PARAM_OUT(V_EMPNO, V_ENAME, V_SAL);
--    DBMS_OUTPUT.PUT_LINE('MGR : ' || V_EMPNO);
--    DBMS_OUTPUT.PUT_LINE('ENAME : ' || V_ENAME);
--    DBMS_OUTPUT.PUT_LINE('SAL : ' || V_SAL);
--END;

--함수 만들기
--CREATE OR REPLACE FUNCTION FUNC_AFTER_TAX
--( SAL IN NUMBER )
--RETURN NUMBER
--IS
--    TAX NUMBER := 0.05;
--BEGIN
--    RETURN (ROUND(SAL - (SAL * TAX)));
--END;

--함수 실행 예제
--DECLARE
-- AFTERTAX NUMBER;
-- BEGIN
--    AFTERTAX := FUNC_AFTER_TAX(3000);
--    DBMS_OUTPUT.PUT_LINE('AFTER-TAX INCOME : ' || AFTERTAX);
-- END;
--SELECT 로 바로 부르기
--SELECT FUNC_AFTER_TAX(20000) FROM DUAL;

--CREATE OR REPLACE TRIGGER emp_up_del_tri 
--AFTER UPDATE OR DELETE ON EMP
--FOR EACH ROW 
--
--BEGIN
--IF UPDATING THEN INSERT INTO EMP_BACKUP VALUES
--(:OLD.EMPNO,:OLD.ENAME, :OLD.JOB, :OLD.MGR, :OLD.HIREDATE, :OLD.SAL, :OLD.COMM, :OLD.DEPTNO ,SYSDATE , 수정);
--ELSIF DELETING THEN  INSERT INTO EMP_BACKUP VALUES
--(:OLD.EMPNO,:OLD.ENAME, :OLD.JOB, :OLD.MGR, :OLD.HIREDATE, :OLD.SAL, :OLD.COMM, :OLD.DEPTNO ,SYSDATE , 삭제);
--END IF;
--END;
--
--UPDATE EMP
--SET SAL = SAL * 1.1
--WHERE EMPNO = 7369;
--
--
--SELECT * FROM EMP_BACKUP;
--
--UPDATE EMP
--SET SAL = SAL * 1.1;
--
--SELECT * FROM EMP_BACKUP;
--
--SELECT * FROM EMP;
--DELETE FROM EMP
--WHERE EMPNO = 7499;
